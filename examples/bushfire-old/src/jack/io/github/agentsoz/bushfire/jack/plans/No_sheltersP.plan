/*******************************************************************
 * Created by the JDE: Thu Jun 11 19:23:36 AEST 2015
 * WARNING: If you are editing this file from outside the JDE, you
 * should make sure to load the changes back into the JDE by setting
 * the preference "Check for outside changes..." in the "Text Editor"
 * preference tab or reload the component manually.
 * Otherwise you will lose your changes next time the file is generated.
 *******************************************************************/

package io.github.agentsoz.bushfire.jack.plans;

import io.github.agentsoz.bushfire.bdi.BDIConstants;
import io.github.agentsoz.bushfire.bdi.IBdiConnector;
import com.vividsolutions.jts.geom.Coordinate;
import io.github.agentsoz.bushfire.jack.agents.EvacController;
import io.github.agentsoz.bushfire.jack.data.Areas;
import io.github.agentsoz.bushfire.jack.data.Fire;
import io.github.agentsoz.bushfire.jack.data.Shelter_Assignments;
import io.github.agentsoz.bushfire.jack.data.Shelters;
import io.github.agentsoz.bushfire.jack.events.Decide_shelterG;
import java.awt.Polygon;
import java.awt.geom.Rectangle2D;
import java.lang.Math;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Sewwandi Perera
 */
public plan No_sheltersP extends Plan {

    logical Coordinate location;
    logical int population;
    logical List viableShelters;
    logical long timeViable;
    logical Polygon firePolygon;
    logical double direction;
    logical long fireTimestamp;
    double fireDirection;
    final Logger logger = LoggerFactory.getLogger("");

    private Coordinate getCentreOfFire(){
        try{
            Cursor c = fire.getEntry(BDIConstants.FIRE_BELIEF_KEY, firePolygon, direction, fireTimestamp);
            c.next();
            Rectangle2D fireBox = ((Polygon)firePolygon.getValue()).getBounds2D();
            fireDirection = (double) (direction.getValue());
            return new Coordinate((float)fireBox.getCenterX(), (float)fireBox.getCenterY());
        } catch(Exception e){
            logger.error("Error:" + e.getMessage()); 
            System.exit(0);
        }
        
        return null;
    }

    private Coordinate pickShelter(Coordinate fireCentre){
        int distance = ((EvacController)getAgent()).bdiConnector.getShelterDistanceInMeters();
        double coordX = fireCentre.x + distance * Math.cos(90 + fireDirection);
        double coordY = fireCentre.y + distance * Math.sin(90 + fireDirection);
        return new Coordinate((float)coordX, (float)coordY);
    }
    #handles event Decide_shelterG h_Decide_shelterG;
    #uses interface EvacController enc;
    #uses data Shelters shelters;
    #uses data Shelter_Assignments shelterAssignments;
    #uses data Areas areas;
    #uses data Fire fire;
    
    static boolean relevant(Decide_shelterG ev)
    {
        return true;
    }
    
    context()
    {
        areas.getData(h_Decide_shelterG.areaName, location, population, viableShelters, timeViable) 
        && ((null == viableShelters.getValue()) 
        || (((List)viableShelters.getValue()).isEmpty()));
    }
    
    #reasoning method
    body()
    {
        logger.trace("No_sheltersP is initiated for area " + h_Decide_shelterG.areaName);
        Coordinate fireCentre = getCentreOfFire();
        Coordinate selectedShelter = pickShelter(fireCentre);
        String shelterName = ((EvacController)getAgent()).bdiConnector.getNewShelterName();
        
        //Insert newly created shelter to Shelters beliefset
        shelters.insert(shelterName, selectedShelter, 0, 0);
        
        //Update Shelter assignments
        shelterAssignments.insert(h_Decide_shelterG.areaName, shelterName);
    }
    

}

