/*******************************************************************
 * Created by the JDE: Thu Jun 11 19:23:37 AEST 2015
 * WARNING: If you are editing this file from outside the JDE, you
 * should make sure to load the changes back into the JDE by setting
 * the preference "Check for outside changes..." in the "Text Editor"
 * preference tab or reload the component manually.
 * Otherwise you will lose your changes next time the file is generated.
 *******************************************************************/

package io.github.agentsoz.bushfire.jack.plans;

import com.vividsolutions.jts.geom.Coordinate;
import io.github.agentsoz.bushfire.jack.agents.EvacController;
import io.github.agentsoz.bushfire.jack.data.Areas;
import io.github.agentsoz.bushfire.jack.data.Shelter_Assignments;
import io.github.agentsoz.bushfire.jack.data.Shelters;
import io.github.agentsoz.bushfire.jack.events.Decide_shelterG;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Sewwandi Perera
 */
public plan Choose_by_capacityP extends Plan {

    logical Coordinate location;
    logical int population;
    logical List viableShelters;
    logical long timeViable;
    logical String shelter;
    final Logger logger = LoggerFactory.getLogger("");

    private String getHighestCapacityShelter(Map shetlerCapacities){
        logger.debug("Shelters and remaining capacities:" + shetlerCapacities);
        
        int maxValue = 0;
        String keyOfMaxValue = null;
        
        Object[] keys = (shetlerCapacities.keySet()).toArray(new String[shetlerCapacities.size()]);
        
        for(int i = 0 ; i < keys.length ; i++)
        {
            if (null == keyOfMaxValue || ((Integer)shetlerCapacities.get(keys[i])).compareTo(maxValue) > 0)
            {
                keyOfMaxValue = (String)keys[i];
                maxValue = (int) shetlerCapacities.get(keyOfMaxValue);
            }
        }
        
        logger.debug("Shelter with higest remaining capacity:" + keyOfMaxValue);
        
        return keyOfMaxValue;
    }

    private void releaseShelterIfAlreadyAssigned(){
        try {
            Cursor c = shelterAssignments.qGetShelter(h_Decide_shelterG.areaName, shelter);
            if(c.next()){
                shelters.increaseShelterCapacity((String)shelter.getValue(), (int) population.getValue());
            }
        } catch(Exception e){
            logger.error("Error:" + e.getMessage()); 
            System.exit(0);
        }
    }
    #handles event Decide_shelterG h_Decide_shelterG;
    #uses interface EvacController enc;
    #uses data Shelter_Assignments shelterAssignments;
    #uses data Shelters shelters;
    #uses data Areas areas;
    
    static boolean relevant(Decide_shelterG ev)
    {
        return true;
    }
    
    context()
    {
        areas.getData(h_Decide_shelterG.areaName, location, population, viableShelters, timeViable) 
        && (null != viableShelters.getValue()) 
        && (((List)viableShelters.getValue()).size() > 1);
    }
    
    #reasoning method
    body()
    {
        logger.trace("Choose_by_capacityP is initiated for area " + h_Decide_shelterG.areaName);
        
        releaseShelterIfAlreadyAssigned();
        
        Map shetlerCapacities = shelters.getRemainingCapacities((List)viableShelters.getValue());
        
        String selectedShelterName = getHighestCapacityShelter(shetlerCapacities);
        
        shelters.reduceShelterCapacity(selectedShelterName, (int) population.getValue());
        
        shelterAssignments.insert(h_Decide_shelterG.areaName, selectedShelterName);
    }
    

}

