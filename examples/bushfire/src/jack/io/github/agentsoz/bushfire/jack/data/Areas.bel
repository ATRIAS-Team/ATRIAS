/*******************************************************************
 * Created by the JDE: Thu Jun 11 19:23:38 AEST 2015
 * WARNING: If you are editing this file from outside the JDE, you
 * should make sure to load the changes back into the JDE by setting
 * the preference "Check for outside changes..." in the "Text Editor"
 * preference tab or reload the component manually.
 * Otherwise you will lose your changes next time the file is generated.
 *******************************************************************/

package io.github.agentsoz.bushfire.jack.data;

import com.vividsolutions.jts.geom.Coordinate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Sewwandi Perera
 */
public beliefset Areas extends OpenWorld {
    #key field String name;
    #value field Coordinate location;
    #value field int population;
    #value field List viableShelters;
    #value field long timeViable;
    #indexed query getData(String name, logical Coordinate location, logical int population, logical List viableShelters, logical long timeViable);
    #indexed query getAllData(logical String name, logical Coordinate location, logical int population, logical List viableShelters, logical long timeViable);
    
    final Logger logger = LoggerFactory.getLogger("");
    
    #function query List getAllNames(){
        List areaNames =  new ArrayList();
        logical String name;
        logical Coordinate location;
        logical int population;
        logical List viableShelters;
        logical long timeViable;
        Cursor c = getAllData(name, location, population, viableShelters, timeViable);
        for( ; c.next() ; ) {
            areaNames.add(name.getValue());
        }
    
        return areaNames;
    }
    
    #function query HashMap getAllLocations(){
        HashMap areaInfo = new HashMap();
        logical String name;
        logical Coordinate location;
        logical int population;
        logical List viableShelters;
        logical long timeViable;
        Cursor c = getAllData(name, location, population, viableShelters, timeViable);
        for( ; c.next() ; ) {
            areaInfo.put(name.getValue(), location.getValue());
        }
    
        return areaInfo;        
    }
    
    #function query List getViableShelters(String areaName){
        logical Coordinate location;
        logical int population;
        logical List viableShelters;
        logical long timeViable;
        Cursor c = getData(areaName, location, population, viableShelters, timeViable);
        c.next();
    
        return (List)viableShelters.getValue();        
    }
    
    #function query boolean updateViableShelters(List newViableShelters, String name, long timestamp){
        logical Coordinate location;
        logical int population;
        logical List viableShelters;
        logical long timeViable;
        Cursor c = getData(name, location, population, viableShelters, timeViable);
        c.next();
        add(name, (Coordinate)location.getValue(), (int)population.getValue(), newViableShelters, timestamp); 
       
        return true;
        
    }



    public void insert(String name, Coordinate location, int population, List viableShelters, long timeViable){
        try {
            add(name, location, population, viableShelters, timeViable);
            logger.debug("Added new area [name:" + name + ", location:" + location + ", population:" + population +", viableShelters:" + viableShelters + ", timeViable:" + timeViable + "]");
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
    }

    public List getAllAreaNames(){
        try {
            return getAllNames();
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;
    }

    public HashMap getAllAreaLocations(){
        try {
            return getAllLocations();
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;
    }

    public void addViableSheltersToArea(List newViableShelters, String area, long timestamp){
        try {
            updateViableShelters(newViableShelters, area, timestamp);
            logger.debug("Added new viable shelters " + newViableShelters + " to area " + area);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
    }

    public List getViableSheltersOfArea(String areaName){
        try {
            return getViableShelters(areaName);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;
    }

}

