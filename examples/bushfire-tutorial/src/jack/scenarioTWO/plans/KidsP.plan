package scenarioTWO.plans;
import scenarioTWO.events.*;
import scenarioTWO.data.*;
import scenarioTWO.agents.EvacResident;
import io.github.agentsoz.abmjack.env.GenericActGoal;
import io.github.agentsoz.bushfiretute.shared.ActionID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public plan KidsP extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: KidsP
*/
	//Events handled by the plan are declared here.

	#handles event KidsG kidsg_h;


	// Declarations of any beliefset/data that the plan accesses.
/******** End PDT Design Block *** DO NOT EDIT IT *********/


	#uses interface EvacResident res;
	#posts event GenericActGoal genericactgoal_p;

	final Logger logger = LoggerFactory.getLogger("");

	static boolean relevant(KidsG kidsg_h)
    {
        return true;
    }

	context()
	{
		true;
	}

	#reasoning method
	body()
	{

		logger.info("agent ID " + res.agentID + " is picking up kids..");

		int pickuptime = res.bdiConnector.getPickupTime() * 60; // get a random pickup time in minutes and convert it to seconds
		logger.debug("pickup time is" + pickuptime);

	/*
		//1.driveTo action
		res.initiatedAction=ActionID.DRIVETO;
		res.targetDestination="Kids";

		Object[] params = new Object[] { (Object)ActionID.DRIVETO, res.schoolLocation , res.targetDestination};
		logger.debug(" Action : "+ActionID.DRIVETO + " school coords: " + res.schoolLocation[0] +" "+ res.schoolLocation[1]);
		GenericActGoal gag = genericactgoal_p.act(res.getActionManager(), ActionID.DRIVETO, params );
		long startTime = res.getCurrentTime();
		@subtask( gag );

		logger.info("driveTo action returned, issuing pickup activity");

		//2.pickup action
		if(res.currentLocation.equals("Kids")) {
			logger.debug("agent has reached the Kids school");
			Object[] params = new Object[] { (Object)ActionID.PICKUP, pickuptime, res.schoolLocation};
			logger.debug(" Action : "+ActionID.PICKUP + " pickup time: " + pickuptime);
			GenericActGoal gag = genericactgoal_p.act(res.getActionManager(), ActionID.PICKUP, params );
			@subtask( gag );
		}

		else
		{
			logger.error(" agent is not at the Kid's school, BDI action pickup failed !!");
		}

	*/
		////driveToAndPickUp
		res.initiatedAction=ActionID.driveToAndPickUp;
		res.targetDestination="school";

		Object[] pickup_params = new Object[] { (Object)ActionID.driveToAndPickUp , res.schoolLocation , "Kids", pickuptime};

		GenericActGoal gag = genericactgoal_p.act(res.getActionManager(), ActionID.driveToAndPickUp, pickup_params );
		long startTime = res.getCurrentTime();
		@subtask( gag );


		//after pick up kids calculations  should minus pickuptime from the endtime
		long endTime = res.getCurrentTime();
		long tripTime = (endTime - pickuptime) - startTime;
		res.addToTravelTime(tripTime);
		logger.debug(" trip time to pick up kids for agent {} is {}",res.agentID , (Object)tripTime);


//		true;
	}
}
