package io.github.agentsoz.bushfiretute.jack.agents;
import io.github.agentsoz.bushfiretute.jack.capabilities.*;
import io.github.agentsoz.bushfiretute.jack.plans.*;
import io.github.agentsoz.bushfiretute.jack.events.*;
import io.github.agentsoz.bushfiretute.jack.data.*;

import io.github.agentsoz.util.evac.jackhelper.IBdiConnector;
import io.github.agentsoz.abmjack.shared.ActionManager;
import io.github.agentsoz.abmjack.shared.GlobalTime;
import io.github.agentsoz.bdiabm.data.ActionContent.State;
import io.github.agentsoz.abmjack.env.GenericActions;
import io.github.agentsoz.abmjack.env.GenericActGoal;
import io.github.agentsoz.abmjack.env.UpdateAction;
import io.github.agentsoz.dataInterface.DataServer;
import io.github.agentsoz.util.Global;

import io.github.agentsoz.util.Global;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.PrintStream;
import java.util.Random;
import java.lang.String;

public agent EvacResident extends Agent /*implements InterfaceName*/
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/
/*
Agent Name: EvacResident
*/

	//Knowledge bases used are declared here.
	/*	You may need to change the statement declaration of data/beliefset to:
	#agent | #global | #private
	*/
	#agent data depTime depTimesBDB_dat(/**/);


	//Events handled
	#handles event EvacAlert ;
	#handles event AssessThreatG ;
	#handles event RelsG ;
	#handles event KidsG ;
  	#handles event UpdateAction;
  	#handles event LeaveFromHome leavefromhome_h;

	#posts event AssessThreatG assessthreatg_p;
	#posts event RelsG relsg_p;
	#posts event KidsG kidsg_p;
	#posts event UpdateAction updateaction_p;
	#posts event EvacAlert evacalert_h;
	#posts event LeaveFromHome leavefromhome_h;

	//Plans directly used are declared here.
	#uses plan AlreadyPreparedP ;
	#uses plan RelsP ;
	#uses plan PrepareP ;
	#uses plan KidsP ;
	#uses plan GoHomeP ;
	#uses plan LeaveNowP ;
	#uses plan LeaveHomeP ;



	//capabilities
  	#has capability GenericActions genericactions_cap;




/******** End PDT Design Block *** DO NOT EDIT IT *********/
	final Logger logger = LoggerFactory.getLogger("");

	Random rand =  new Random();

	public PrintStream out;
	public String agentID;
	public ActionManager actionManager;
	public IBdiConnector bdiConnector;
	public double curTime=100.0;
	public boolean evac_started_flag;
	public boolean fireResponse = false;
   	public boolean kidsNeedPickUp = false;
   	public boolean relsNeedPickUp = false;
   	public boolean waitAtHomeFlag = false;
	public double depTime;
	public boolean prepared_to_evac_flag = true;
	public double travelTime;
	public double[] startLocation;
	public double[] endLocation;
	public double[] currentDestination;
	public double[] schoolLocation;
	public String targetDestination;
	public String initiatedAction=" ";
	public String currentLocation=" ";

    private double currentTime = 0.0;

	/* Constructor */
	public EvacResident(String id, 
			IBdiConnector ibdiConnector, 
			ActionManager am,
			PrintStream out)
	{
			super(id);
			this.out = out;
			this.agentID = id ;
			this.bdiConnector = ibdiConnector;
			this.evac_started_flag = false;
			this.actionManager = am;
	}

	public void postEvacAlert(String msg)
	{
		postEvent(evacalert_h.fireAlert(msg) );
	}

	public void postLeaveGoal()
	{
		logger.trace("agent posting LeaveHome goal..");
		postEvent(leavefromhome_h.leaveHome() );

	}

	public void updateCurrentLocation() {
			if( targetDestination.equals(" ") ) {
				logger.error("attempt to update current location while target destination is empty for agent " + this.agentID);
			}
			else{

				this.currentLocation = this.targetDestination;
				logger.debug("updated current location to " + this.currentLocation + " for agent " + this.agentID );
			}
	}

	public void removeTargetDestination() {
			this.targetDestination = " ";
			this.initiatedAction = " ";
			logger.debug("completed resetting target destination and initiatedAction attributes for agent " + this.agentID);
	}
		//initialising the depTime
	public void setDepTime(double depTime)
	{
		//this.depTime = depTime;
		 try
		{
			depTimesBDB_dat.add(this.agentID,depTime); //initially setting deptime
		//	logger.debug("added depTime " + depTime + " for agent : "+ this.agentID ); //total tuples: " + + depTimesBDB_dat.nFacts()
		}
		catch(java.lang.Exception e)
		{
			logger.info("unable to set  depTime to agent " + this.agentID); // bse.getMessage()
		}
	}

	public double[] getStartLocation() {
		return startLocation;
   	}

	 public void setDestination( )
	 {
	 		  double[] dest = {634810.1718,5888786.360};
	 	      currentDestination = dest;
	 }

	public ActionManager getActionManager() {
      	return actionManager;
   	}

	public void updateActionState(String actionID, State state, Object[] params) {
      	postEvent(updateaction_p.postEvent(actionID, state, params));
      	logger.debug("agent posted updateActionState event..");

   	}

   	public double getCurrentTime(){
        return currentTime;
    }

   	public void setCurrentTime(double time){
        this.currentTime = time;
    }

	public double getTimeLeftToEvac()
	{
		//return depTime - getCurrentTime() ;
		double deptime = depTimesBDB_dat.getDepartureTime(this.agentID);
		if(deptime == -1.0) {
			logger.error("agent: " + this.agentID + " - incorrect departure time returned from the belief DB");
		}

		logger.trace("agent deptime :" + deptime + "current Time : " + getCurrentTime());
		return deptime - getCurrentTime();
	}

	public void setEvacStartedFlagTrue()
	{
		this.evac_started_flag = true;
	}

	public boolean getEvacStartedFlag()
	{
		return this.evac_started_flag;
	}

	//preparedToEvac flag
	public void setPreparedToEvacFlagTrue()
	{
		this.prepared_to_evac_flag = true;
	}


	public boolean getPreparedToEvacFlag()
	{
		return this.prepared_to_evac_flag;
	}

	//travel time
	public void addToTravelTime(double tripTime)
	{
		this.travelTime = this.travelTime + tripTime;
	}

	public double getTravelTime()
	{
		return this.travelTime;
	}
	
	public void log(String msg) {
		Object[] o = {Double.toString(getCurrentTime()), this.agentID, msg};
		logger.info(String.format("Time %-6s, Agent %-5s: %s", o));
	}
}
