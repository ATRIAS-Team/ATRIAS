package io.github.agentsoz.abmjadex.agent;

/*
 * #%L
 * BDI-ABM Integration Package
 * %%
 * Copyright (C) 2014 - 2015 by its authors. See AUTHORS file.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */


import io.github.agentsoz.abmjadex.data_structure.SyncArrayList;

import java.util.Map;
import java.util.Set;

import io.github.agentsoz.bdiabm.data.PerceptContainer;
import jadex.bdi.runtime.IBeliefSet;
import jadex.bdi.runtime.IGoal;
import jadex.bdi.runtime.Plan;
import jadex.extension.envsupport.environment.IEnvironmentSpace;
import jadex.extension.envsupport.environment.ISpaceObject;

/**
 * The First Setting done by an agent when it is born.
 * It will update the componentID generated by Jadex towards its Avatar's property
 * in Central Organizer.
 * This also will update the initial percepts sent by Repast.
 */
public class BirthPlan extends Plan
{	
	
	private static final long serialVersionUID = -4740065470165194729L;
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public void body() 
	{	
		//System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~agent Born: " + this.getComponentIdentifier());
		
		this.getBeliefbase().getBelief("justBorn").setFact(false);
		//Initialize the respective Jadex agent which represent the ABM agent.
		ISpaceObject myself = (ISpaceObject) getBeliefbase().getBelief("myself").getFact();
		myself.setProperty("componentID", this.getComponentIdentifier());
				
		//Building maps of IComponentIdentifier with Repast's generated agentID
		IEnvironmentSpace env = (IEnvironmentSpace)getBeliefbase().getBelief("environment").getFact();
		Map componentAgentIDMap = (Map)env.getProperty("componentAgentIDMap");
		componentAgentIDMap.put(this.getComponentIdentifier(), myself.getProperty("agentID"));
		env.setProperty("componentAgentIDMap", componentAgentIDMap);
		
		//update all the belief from ABM's initial percepts
		updateBelief();
		
		//if there is no initial goal at birth, then put agent to idle
		if (this.getGoalbase().getGoals().length == 0)
		{
			IGoal goal = createGoal("readyToIdle");
			dispatchTopLevelGoal(goal);
		}
	}
	
	public void updateBelief()
	{
		ISpaceObject myself = (ISpaceObject)getBeliefbase().getBelief("myself").getFact();
		PerceptContainer perceptContainer = (PerceptContainer)myself.getProperty("perceptContainer");
		Set<String> perceptIDSet = perceptContainer.perceptIDSet();
//		System.out.println("Modified - 2");
//		System.out.println("PContainer : \n" +"  "+perceptContainer);
		//for (String perceptID : perceptIDSet)
		Object[] perceptIDSetA = perceptIDSet.toArray();
//		System.out.println(perceptIDSetA.length);
		try
		{
			for(int m = 0; m < perceptIDSetA.length; m++)
			{
				String perceptID = (String)perceptIDSetA[m];
				//startAtomic();
				IGoal[] oldGoal = this.getGoalbase().getGoals();
//				System.out.println(m + " PerceptID :" + perceptID);
				if (getBeliefbase().containsBelief(perceptID))
				{
//					System.out.println("Belief :" + perceptID);
					Object oldFact = getBeliefbase().getBelief(perceptID).getFact();
					Object newFact = perceptContainer.read(perceptID);
					if (!oldFact.equals(newFact))
					{
//						System.out.println("Belief Change:" + newFact);
						getBeliefbase().getBelief(perceptID).setFact(newFact);	
					}
				}
				else if (getBeliefbase().containsBeliefSet(perceptID))
				{
					IBeliefSet beliefSet = getBeliefbase().getBeliefSet(perceptID);
					Object newFact = perceptContainer.read(perceptID);
					
					if (newFact.getClass().equals(beliefSet.getClazz()))
					{
						beliefSet.addFact(newFact);
					}
					else
					{
						Object[] newFacts = (Object[]) newFact;
						beliefSet.addFacts(newFacts);
					}
				}
				else
				{
					throw new RuntimeException ("perceptID is not recognized by Jadex's belief/beliefset");
				}
				int noOfNewlyGeneratedGoal = this.getNoOfNewlyGeneratedGoalSince(oldGoal);
				//endAtomic();
				if (noOfNewlyGeneratedGoal > 0)
				{
					Integer noOfTopLevelGoal 
							= (Integer)getBeliefbase().getBelief("noOfTopLevelGoal").getFact();
					noOfTopLevelGoal = noOfTopLevelGoal + noOfNewlyGeneratedGoal;
					getBeliefbase().getBelief("noOfTopLevelGoal").setFact(noOfTopLevelGoal);
				}
			}
		}catch(Exception e)
		{
			System.out.println("Error Exist");
			e.printStackTrace();
		}
		
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public int getNoOfNewlyGeneratedGoalSince(IGoal[] oldGoals)
	{
		int i = 0;
		IGoal[] goals = getGoalbase().getGoals();
		SyncArrayList dispatchedTopLevelGoal 
				= (SyncArrayList)getBeliefbase().getBelief("dispatchedTopLevelGoal").getFact();
		
		for (int j = 0; j < goals.length; j++)
		{
			boolean isExistBefore = false;
			for(int k = 0; k < oldGoals.length; k++)
			{
				if (oldGoals[k].equals(goals[j]))
				{
					isExistBefore = true;
				}
			}
			if (!isExistBefore)
			{
				dispatchedTopLevelGoal.add(goals[j]);
				i++;
			}
		}
		
		getBeliefbase().getBelief("dispatchedTopLevelGoal").setFact(dispatchedTopLevelGoal);
		return i;
	}
}
