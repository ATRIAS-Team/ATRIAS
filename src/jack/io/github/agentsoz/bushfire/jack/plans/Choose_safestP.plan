/*******************************************************************
 * Created by the JDE: Thu Jun 11 19:23:38 AEST 2015
 * WARNING: If you are editing this file from outside the JDE, you
 * should make sure to load the changes back into the JDE by setting
 * the preference "Check for outside changes..." in the "Text Editor"
 * preference tab or reload the component manually.
 * Otherwise you will lose your changes next time the file is generated.
 *******************************************************************/

package io.github.agentsoz.bushfire.jack.plans;

import io.github.agentsoz.bushfire.bdi.BDIConstants;
import com.vividsolutions.jts.geom.Coordinate;
import io.github.agentsoz.bushfire.jack.agents.EvacController;
import io.github.agentsoz.bushfire.jack.data.Areas;
import io.github.agentsoz.bushfire.jack.data.Fire;
import io.github.agentsoz.bushfire.jack.data.Shelter_Assignments;
import io.github.agentsoz.bushfire.jack.data.Shelters;
import io.github.agentsoz.bushfire.jack.events.Decide_shelterG;
import java.awt.Polygon;
import java.awt.geom.Rectangle2D;
import java.lang.Math;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Sewwandi Perera
 */
public plan Choose_safestP extends Plan {

    logical Coordinate location;
    logical int population;
    logical List viableShelters;
    logical long timeViable;
    logical Polygon firePolygon;
    logical double direction;
    logical long fireTimestamp;
    logical String shelter;
    double fireDirection;
    final Logger logger = LoggerFactory.getLogger("");

    private Coordinate getCentreOfFire(){
        try{
            Cursor c = fire.getEntry(BDIConstants.FIRE_BELIEF_KEY, firePolygon, direction, fireTimestamp);
            c.next();
            Rectangle2D fireBox = ((Polygon)firePolygon.getValue()).getBounds2D();
            fireDirection = (double) (direction.getValue());
            return new Coordinate((float)fireBox.getCenterX(), (float)fireBox.getCenterY());
        } catch(Exception e){
            logger.error("Error:" + e.getMessage()); 
            System.exit(0);
        }
        
        return null;
    }

    private String getSafestShelter(Map shetlerLocations, Coordinate fireCentre){
        double maxValue = 0;
        String keyOfMaxValue = null;
        
        Object[] keys = (shetlerLocations.keySet()).toArray(new String[shetlerLocations.size()]);
        
        for(int i = 0 ; i < keys.length ; i++)
        {
            //Calculating angle from north to the path from centre of fire to the shelter
            Coordinate shelterLocation = (Coordinate)shetlerLocations.get(keys[i]);
            double deltaY = (shelterLocation.y - fireCentre.y);
            double deltaX = (shelterLocation.x - fireCentre.x);
            double angle = Math.toDegrees(Math.atan2(deltaX, deltaY)); 
            
            if(angle < 0){
                angle += 360;
            }
            
            double angleDifference = Math.abs(angle - fireDirection);
            
            logger.debug("Shelter:" + keys[i] + "|angle:" + angle + "|anglediff:" + angleDifference);
            
            if (null == keyOfMaxValue || angleDifference > maxValue)
            {
                keyOfMaxValue = (String)keys[i];
                maxValue = angleDifference;
            }
        }
        
        logger.debug("Safest shelter:" + keyOfMaxValue);
        
        return keyOfMaxValue;
    }

    private void releaseShelterIfAlreadyAssigned(){
        try {
            Cursor c = shelterAssignments.qGetShelter(h_Decide_shelterG.areaName, shelter);
            if(c.next()){
                shelters.increaseShelterCapacity((String)shelter.getValue(), (int) population.getValue());
            }
        } catch(Exception e){
            logger.error("Error:" + e.getMessage()); 
            System.exit(0);
        }
    }
    #handles event Decide_shelterG h_Decide_shelterG;
    #uses interface EvacController enc;
    #uses data Shelters shelters;
    #uses data Shelter_Assignments shelterAssignments;
    #uses data Areas areas;
    #uses data Fire fire;
    
    static boolean relevant(Decide_shelterG ev)
    {
        return true;
    }
    
    context()
    {
        areas.getData(h_Decide_shelterG.areaName, location, population, viableShelters, timeViable) 
        && (null != viableShelters.getValue()) 
        && (((List)viableShelters.getValue()).size() > 1);
    
    }
    
    #reasoning method
    body()
    {
        logger.trace("Choose_safestP is initiated for area " + h_Decide_shelterG.areaName);
        
        releaseShelterIfAlreadyAssigned();
        
        Coordinate fireCentre = getCentreOfFire();
        
        //Get locations of viableshelters
        Map shetlerLocations = shelters.getLocations((List)viableShelters.getValue());
        
        String selectedShelterName = getSafestShelter(shetlerLocations, fireCentre);
        
        shelters.reduceShelterCapacity(selectedShelterName, (int) population.getValue());
        
        shelterAssignments.insert(h_Decide_shelterG.areaName, selectedShelterName);
    }
    

}

