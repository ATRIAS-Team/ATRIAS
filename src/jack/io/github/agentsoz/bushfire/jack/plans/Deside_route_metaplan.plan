/*******************************************************************
 * Created by the JDE: Thu Jun 11 19:23:37 AEST 2015
 * WARNING: If you are editing this file from outside the JDE, you
 * should make sure to load the changes back into the JDE by setting
 * the preference "Check for outside changes..." in the "Text Editor"
 * preference tab or reload the component manually.
 * Otherwise you will lose your changes next time the file is generated.
 *******************************************************************/

package io.github.agentsoz.bushfire.jack.plans;

import io.github.agentsoz.bushfire.bdi.IBdiConnector;
import io.github.agentsoz.bushfire.jack.agents.EvacController;
import io.github.agentsoz.bushfire.jack.events.Decide_routeG;
import java.util.Random;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Sewwandi Perera
 */
public plan Deside_route_metaplan extends Plan {

    #chooses for event Decide_routeG;
    String eventDescription;
    String eventName;
    private int totalPlans;
    private String[] plans;
    private Signature[] signatures;
    final Logger logger = LoggerFactory.getLogger("");

    private void readPlanInfo(){
        totalPlans = event.applicable.size;
        plans = new String[totalPlans];
        signatures = new Signature[totalPlans];
        //planInfos = new PlanInfo[totalPlans];
            
        logger.debug("Number of applicable plans for the event Decide_routeG is " + totalPlans);
    
        Signature sig = event.applicable.first();
            
        eventDescription = ((Decide_routeG)sig.getEvent()).description;
        eventName = sig.getEvent().getEventName().substring(sig.getEvent().getEventName().lastIndexOf( "." ) + 1);
        
        int i = 0;
        try {
            // Loop through applicable plans
            while (sig != null) {
                Plan plan = sig.getPlan();
                plans[i] = plan.getPlanName(); //substring(getPlanName().lastIndexOf( "." ) + 1 );
                signatures[i] = sig;
                    // Retrieve PlanInfo data from plan, if present
                    //PlanInstanceInfo pii = plan.getInstanceInfo();
                    //planInfos[i] = ((ExtendedPlanInstanceInfo) pii).info;
                i++;
                sig = event.applicable.next(sig);
            }
        } catch (Exception e) {
            logger.error("Error: Deside_shelter_metaplan failed");
            System.exit(0);
        }
    }
    #handles event PlanChoice event;
    #uses interface EvacController enc;
    
    //private PlanInfo[] planInfos;
    
    static boolean relevant(PlanChoice ev)
    {
        return true;
    }
    
    context()
    {
        true;
    }
    
    #reasoning method
    body()
    {
        logger.trace("Deside_route_metaplan is initiated");
        
        readPlanInfo();
        
        if (enc.bdiConnector.isManualConfigurationAllowed(eventName) && enc.bdiConnector.isVisualiserActive()) {
            //When the visualiser is active give all options to the user.
            
            logger.debug("User selected plan <plan name>");
        } else {
            //When the visualiser is not active randomly pick a plan.
            Random random = io.github.agentsoz.util.Global.getRandom();
            int index = random.nextInt(totalPlans);
            event.chosen = signatures[index];
            logger.debug("Event description:" + eventDescription);
            logger.debug("Randomly selected the plan " + plans[index]);
            return true;
        }
    }
    

}

