/*******************************************************************
 * Created by the JDE: Thu Jun 11 19:23:36 AEST 2015
 * WARNING: If you are editing this file from outside the JDE, you
 * should make sure to load the changes back into the JDE by setting
 * the preference "Check for outside changes..." in the "Text Editor"
 * preference tab or reload the component manually.
 * Otherwise you will lose your changes next time the file is generated.
 *******************************************************************/

package io.github.agentsoz.bushfire.jack.data;

import com.vividsolutions.jts.geom.Coordinate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Sewwandi Perera
 */
public beliefset Shelters extends OpenWorld {
    #key field String name;
    #value field Coordinate location;
    #value field int capacity;
    #value field int assignedCapacity;
    #value field int remainingCapacity;
    #indexed query getAllData(logical String name, logical Coordinate location, logical int capacity, logical int assignedCapacity, logical int remainingCapacity);
    #indexed query getShelterData(String name, logical Coordinate location, logical int capacity, logical int assignedCapacity, logical int remainingCapacity);
    
    final Logger logger = LoggerFactory.getLogger("");
    
    #function query HashMap getAllLocations(){
        HashMap shelterInfo = new HashMap();
        logical String name;
        logical Coordinate location;
        logical int capacity;
        logical int assignedCapacity;
        logical int remainingCapacity;
        Cursor c = getAllData(name, location, capacity, assignedCapacity, remainingCapacity);
        for( ; c.next() ; ) {
            shelterInfo.put(name.getValue(), location.getValue());
        }
    
        return shelterInfo;        
    }
    
    #function query Coordinate getLocation(String name){
        logical Coordinate location;
        logical int capacity;
        logical int assignedCapacity;
        logical int remainingCapacity;
        Cursor c = getShelterData(name, location, capacity, assignedCapacity, remainingCapacity);
        c.next();
    
        return (Coordinate)location.getValue();        
    }
    
    #function query List getAllNames(){
        List shelterNames =  new ArrayList();
        logical String name;
        logical Coordinate location;
        logical int capacity;
        logical int assignedCapacity;
        logical int remainingCapacity;
        Cursor c = getAllData(name, location, capacity, assignedCapacity, remainingCapacity);
        for( ; c.next() ; ) {
            shelterNames.add(name.getValue());
        }
    
        return shelterNames;
    }
    
    #function query Map getShelterCapacities(List shelterNames){
        Map shetlerCapacities = new HashMap();
        
        for( int i = 0 ; i < shelterNames.size() ; i++){
            logical Coordinate location;
            logical int capacity;
            logical int assignedCapacity;
            logical int remainingCapacity;
            Cursor c = getShelterData((String)shelterNames.get(i), location, capacity, assignedCapacity, remainingCapacity);
            c.next();
            shetlerCapacities.put(shelterNames.get(i), (Object)remainingCapacity.getValue());
        }
        
        return shetlerCapacities;
    }
    
    #function query Map getShelterLocations(List shelterNames){
        Map shetlerLocations = new HashMap();
        
        for( int i = 0 ; i < shelterNames.size() ; i++){
            logical Coordinate location;
            logical int capacity;
            logical int assignedCapacity;
            logical int remainingCapacity;
            Cursor c = getShelterData((String)shelterNames.get(i), location, capacity, assignedCapacity, remainingCapacity);
            c.next();
            shetlerLocations.put(shelterNames.get(i), (Object)location.getValue());
        }
        
        return shetlerLocations;
    }
    
    #function query boolean reduceCapacity(String shelterName, int capacityAllocation){
        logical Coordinate location;
        logical int capacity;
        logical int assignedCapacity;
        logical int remainingCapacity;
        
        Cursor c = getShelterData(shelterName, location, capacity, assignedCapacity, remainingCapacity);
        c.next();
        add(shelterName, (Coordinate)location.getValue(), (int)capacity.getValue(), 
            (int)assignedCapacity.getValue() + capacityAllocation, (int)remainingCapacity.getValue() - capacityAllocation);
        
        return true;
    }
    
    #function query boolean increaseCapacity(String shelterName, int capacityAllocation){
        logical Coordinate location;
        logical int capacity;
        logical int assignedCapacity;
        logical int remainingCapacity;
        
        Cursor c = getShelterData(shelterName, location, capacity, assignedCapacity, remainingCapacity);
        c.next();
        add(shelterName, (Coordinate)location.getValue(), (int)capacity.getValue(), 
            (int)assignedCapacity.getValue() + capacityAllocation, (int)remainingCapacity.getValue() + capacityAllocation);
        
        return true;
    }



    public void insert(String name, Coordinate location, int capacity, int assignedCapacity){
        try {
            int remainingCapacity = capacity - assignedCapacity;
            add(name, location, capacity, assignedCapacity, remainingCapacity);
            logger.debug("Added new shelter [name:" + name 
                + ", location:" + location 
                + ", capacity:" + capacity 
                +", assignedCapacity:" + assignedCapacity 
                + ", remainingCapacity:" + remainingCapacity + "]");
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
    }

    public HashMap getAllShelterLocations(){
        try {
            return getAllLocations();
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;
    }

    public List getAllShelterNames(){
        try {
            return getAllNames();
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;
    }

    public Map getRemainingCapacities(List shelterNames){
        try {
            return getShelterCapacities(shelterNames);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;        
    }

    public void reduceShelterCapacity(String shelterName, int capacityAllocation){
        try {
            reduceCapacity(shelterName, capacityAllocation);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
    }

    public void increaseShelterCapacity(String shelterName, int capacityAllocation){
        try {
            increaseCapacity(shelterName, capacityAllocation);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
    }

    public Map getLocations(List shelterNames){
        try {
            return getShelterLocations(shelterNames);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;        
    }

    public Coordinate getShelterLocation(String name){        
        try {
            return getLocation(name);
        }
        catch(BeliefSetException bse) {
            logger.error("Error: " + bse.getMessage());
        }
        return null;      
    }

}

